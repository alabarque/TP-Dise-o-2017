/* Generated By:JavaCC: Do not edit this line. ParserIndicadores.java */
  package parser;
  import java.io.FileWriter;
  import java.io.IOException;
  import java.io.BufferedWriter;
  import java.io.FileNotFoundException;
  import excepciones.IndicadorException;
  import repositorios.RepositorioIndicadores;
  import entidades.Periodo;
  
  public class ParserIndicadores implements ParserIndicadoresConstants {
    
	private Periodo periodo;

    public void setPeriodos(Periodo periodo) {
        this.periodo = periodo;
    }

    public Periodo getPeriodos() {
        return periodo;
    }

    //Ejecución del analizador
    public static void analizar ( String args) throws IndicadorException {

      //Inicialización del analizador
      ParserIndicadores parser;
      BufferedWriter writer = null;

      if(args.length() == 0){
        System.out.println ("ParserIndicadores: Leyendo de la entrada estandar ...");
        parser = new ParserIndicadores(System.in);
      }
      else if(args.length() > 0){
        System.out.println ("ParserIndicadores: Analizando");
        try {
                        writer = new BufferedWriter( new FileWriter("indicadorPrueba.txt",false));
                        writer.write(args);
                        writer.close();
                } catch (IOException e) {
                         throw new IndicadorException("IOException");
                }
      }
      try {
        parser = new ParserIndicadores(new java.io.FileInputStream("indicadorPrueba.txt"));
        parser.analizarSintacticamente();
      }
      catch(ParseException e){
        throw new IndicadorException("ERROR SINTACTICO");
      }
      catch(TokenMgrError e){
        throw new IndicadorException("Hay Palabras Invalidas");
      } catch (FileNotFoundException e) {
                throw new IndicadorException("FileNotFoundException");
        }
}

public static double evaluar(String args,Periodo periodo) throws IndicadorException {
      ParserIndicadores parser;
      BufferedWriter writer = null;
      double resultado = 0;

                try {
          writer = new BufferedWriter( new FileWriter("indicadorEvaluar.txt",false));
          writer.write(args);
          writer.close();
          parser = new ParserIndicadores(new java.io.FileInputStream("indicadorEvaluar.txt"));
          parser.setPeriodos(periodo);
          resultado = parser.evaluacion();
        } catch (IOException e) {
                 throw new IndicadorException("IOException");
        }
        catch (ParseException e) {
                                 throw new IndicadorException("Error al Evaluar Indicador");
                        }
                catch(TokenMgrError e){
        throw new IndicadorException("Sintaxis de Indicador Invalida");
      }

      return resultado;
}

  final public void analizarSintacticamente() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INDICADOR:
      jj_consume_token(INDICADOR);
      break;
    case CUENTA:
      jj_consume_token(CUENTA);
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        break;
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INDICADOR:
        jj_consume_token(INDICADOR);
        break;
      case CUENTA:
        jj_consume_token(CUENTA);
        break;
      case NUMERO:
        jj_consume_token(NUMERO);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  final public double evaluacion() throws ParseException, IndicadorException {
    double a;
    a = expr();
              {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public double expr() throws ParseException, IndicadorException {
    double a;
    double b;
    a = term();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        b = expr();
                         a += b;
        break;
      case MINUS:
        jj_consume_token(MINUS);
        b = expr();
                         a -= b;
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public double term() throws ParseException, IndicadorException {
    double a;
    double b;
    a = unary();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        b = term();
                         a *= b;
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        b = term();
                         a /= b;
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public double unary() throws ParseException, IndicadorException {
    double a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      a = element();
                         {if (true) return -a;}
      break;
    case NUMERO:
    case CUENTA:
    case INDICADOR:
    case 14:
      a = element();
                         {if (true) return a;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public double element() throws ParseException, IndicadorException {
    Token t;
    double a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
      t = jj_consume_token(NUMERO);
                         {if (true) return Double.parseDouble(t.toString());}
      break;
    case CUENTA:
      t = jj_consume_token(CUENTA);
                          {if (true) return this.getPeriodos().obtenerValorCuenta(t.toString().substring(1));}
      break;
    case INDICADOR:
      t = jj_consume_token(INDICADOR);
                             {if (true) return RepositorioIndicadores.evaluarIndicador(t.toString().substring(1),this.getPeriodos());}
      break;
    case 14:
      jj_consume_token(14);
      a = expr();
      jj_consume_token(15);
                          {if (true) return a;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserIndicadoresTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1a00,0x1e0,0x1e0,0x1a00,0x60,0x60,0x180,0x180,0x5a40,0x5a00,};
   }

  /** Constructor with InputStream. */
  public ParserIndicadores(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserIndicadores(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserIndicadoresTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ParserIndicadores(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserIndicadoresTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ParserIndicadores(ParserIndicadoresTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserIndicadoresTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
